
# @package _global_
# to execute this experiment run:
# python train.py experiment=example

defaults:
  - override /data: equal_split.yaml
  - override /model: efficientNet.yaml
  - override /callbacks: mlp.yaml
  - override /trainer: gpu.yaml
  - override /logger: wandb.yaml # set logger here or use command line (e.g. `python train.py logger=tensorboard`)
  - override /paths: default.yaml
  - override /extras: default.yaml
  - override /hydra: default.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

# task name, determines output directory path
task_name: "multitask_efficientNet"

tags: ["dev", "Sussex Dataset", "MLP", "Efficient"]

# set False to skip model training
train: True

# evaluate on test set, using best model weights achieved during training
# lightning chooses best weights based on the metric specified in checkpoint callback
predict: True

# compile model for faster training with pytorch 2.0
compile: False

# simply provide checkpoint path to resume training
ckpt_path: Null #${paths.log_dir}multitask_efficientNet/runs/2023-08-24_15-09-19_30464/checkpoints/epoch_058.ckpt
 
# seed for random number generators in pytorch, numpy and python.random
seed: 30464

data:
  seed: ${seed}
  train_batch_size: 8

trainer:
  min_epochs: 1
  max_epochs: 100
  num_sanity_val_steps: 0
  # gradient_clip_val: 0.5
  fast_dev_run: False

logger:
  wandb:
    tags: ${tags}
    group: "MultiTask MLP EFFICIENTNET"
  aim:
    experiment: "ECOACOUSTICS MultiTask MLP EFFICIENTNET"

hydra:
  run:
    dir: ${paths.log_dir}/${task_name}/runs/${now:%Y-%m-%d}_${now:%H-%M-%S}_${seed}

umap_latent:
  seed: ${seed}
  model_name: "EfficientNetMLP"
